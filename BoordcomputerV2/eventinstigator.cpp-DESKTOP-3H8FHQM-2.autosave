#include "eventinstigator.h"

#include <iostream>
#include <QTimer>
#include <QDebug>
#include <QThread>
#include <QCoreApplication>

#include "watchdogsubscriberevent.h"
#include "watchdog.h"
#include "dispatcher.h"
#include "controller.h"

namespace cangateway
{
    EventInstigator::EventInstigator(QObject* app)
        : _app(app)
        , _event_worker_thread_watchdog(nullptr)
        , _event_worker_thread_dispatcher(nullptr)
        , _event_worker_thread_controller(nullptr)
    {
    }

    void EventInstigator::instigate()
    {
        qDebug() << "Starting new threads from main: " << QThread::currentThread();
        create_watchdog_thread();
        QTimer::singleShot(1000, Qt::VeryCoarseTimer, _app, &QCoreApplication::quit);

        create_dispatcher_thread();
        QTimer::singleShot(1000, Qt::VeryCoarseTimer, _app, &QCoreApplication::quit);

        create_controller_thread();
        QTimer::singleShot(1000, Qt::VeryCoarseTimer, _app, &QCoreApplication::quit);
    }

    void EventInstigator::handle_event_subscribe_watchdog_manager()
    {
        qDebug() << "Received signal from event worker in main: " << QThread::currentThread();
        WatchdogSubscribeEvent* event = new WatchdogSubscribeEvent();
        event->set_data("Manager");

        QCoreApplication::postEvent(_event_worker_watchdog, event,Qt::QueuedConnection);
    }

    void EventInstigator::handle_event_subscribe_watchdog_dispatcher()
    {
        qDebug() << "Received signal from event worker in main: " << QThread::currentThread();
        WatchdogSubscribeEvent* event = new WatchdogSubscribeEvent();
        event->set_data("Dispatcher");

        QCoreApplication::postEvent(_event_worker_watchdog, event,Qt::QueuedConnection);
    }

    void EventInstigator::handle_event_subscribe_watchdog_controller()
    {
        qDebug() << "Received signal from event worker in main: " << QThread::currentThread();
        WatchdogSubscribeEvent* event = new WatchdogSubscribeEvent();
        event->set_data("Controller");

        QCoreApplication::postEvent(_event_worker_watchdog, event,Qt::QueuedConnection);
    }

    void EventInstigator::create_watchdog_thread()
    {
        _event_worker_thread_watchdog = new QThread();
        _event_worker_watchdog = new Watchdog();
        _event_worker_watchdog->moveToThread(_event_worker_thread_watchdog);

        connect(_event_worker_thread_watchdog, &QThread::started, _event_worker_watchdog, &Watchdog::do_work_watchdog);
        connect(_event_worker_watchdog, &Watchdog::watchdog_finished, _event_worker_thread_watchdog, &QThread::quit);
        connect(_event_worker_watchdog, &Watchdog::watchdog_finished, _event_worker_watchdog, &Watchdog::deleteLater);
        connect(_event_worker_thread_watchdog, &QThread::finished, _event_worker_thread_watchdog, &QThread::deleteLater);

        _event_worker_thread_watchdog->start();
    }

    void EventInstigator::create_dispatcher_thread()
    {
        _event_worker_thread_dispatcher = new QThread();
        _event_worker_dispatcher = new Dispatcher();
        _event_worker_dispatcher->moveToThread(_event_worker_thread_dispatcher);

        connect(_event_worker_thread_dispatcher, &QThread::started, _event_worker_dispatcher, &Dispatcher::do_work_dispatcher);
        connect(_event_worker_dispatcher, &Dispatcher::work_done_dispatcher, this, &EventInstigator::handle_event_subscribe_watchdog_dispatcher);
        connect(_event_worker_dispatcher, &Dispatcher::dispatcher_finished, _event_worker_thread_dispatcher, &QThread::quit);
        connect(_event_worker_dispatcher, &Dispatcher::dispatcher_finished, _event_worker_dispatcher, &Dispatcher::deleteLater);
        connect(_event_worker_thread_dispatcher, &QThread::finished, _event_worker_thread_dispatcher, &QThread::deleteLater);

        _event_worker_thread_dispatcher->start();

    }

    void EventInstigator::create_controller_thread()
    {
        _event_worker_thread_controller = new QThread();
        _event_worker_controller = new Controller();
        _event_worker_controller->moveToThread(_event_worker_thread_controller);

        connect(_event_worker_thread_controller, &QThread::started, _event_worker_controller, &Controller::do_work_controller);
        connect(_event_worker_controller, &Controller::work_done_controller, this, &EventInstigator::handle_event_subscribe_watchdog_controller);
        connect(_event_worker_controller, &Controller::controller_finished, _event_worker_thread_controller, &QThread::quit);
        connect(_event_worker_controller, &Controller::controller_finished, _event_worker_controller, &Controller::deleteLater);
        connect(_event_worker_thread_controller, &QThread::finished, _event_worker_thread_controller, &QThread::deleteLater);

        _event_worker_thread_controller->start();

    }
}
